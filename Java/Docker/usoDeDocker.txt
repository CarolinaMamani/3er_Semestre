Instalacion de Docker video 1 SUCCESSFUL

---------Comandos comunes en docker para correr e iniciar contenedores basados en imagenes:----------
     docker run   : Permite correr una imagen que se convierte en un contenedor
        con un tag:  docker run postgres:lastest
     docker pull    : solo descarga la imagen pero no lo va a correr
     docker images | head : todas las imagenes que tengo hosteada en mi computadora
     docker ps  : muestra los contenedores que estamos corriendo
     docker ps -a   : muestra todos los contenedores que corrieron hace un tiempo
     docker star f2a09f7a79bd : se puede volver a correr un contenerdor con su id para que recupere los ultimos datos que hayas agregado
     docker logs f2a09f7a79bd : para ver los longs de un contenedor especifico con su id
     docker logs -f f2a09f7a79bd : con la -f muestra los logs pero no cierra sino se sigue el long
     docker exec : ejecuta un comando dentro de un contenedor que ya esta corriendo
        docker exec -it f2a09f7a79bd sh : este comando -i crea una secion interactiva, el t emula una terminal dentro del contenedor(id). Entonces se puede ejecutar por ejemplo un sh (una shell)
            ls  : dentro ahora podemos hacer el ls para ver el contenido del contenedor
        docker stop f2a09f7a79bd: detiene el contenedor especifico con su id
    docker run -d nginx   : para correr el contenedor en background usando -d y el nombre de la imagen

en un mismo comando tambien se pueden ejecutar varios contenedores usando sus id o nombres

-------Como desarrollar una app usando un contenedor de docker?-----------

 1.Creamos un docker file IMAGEN BASE: es un archivo que se tiene que llamar Dockerfile
        vim Dockerfile
    nos va a salir en primera linea un FROM, si o si debemos usar una imager Padre que nos va a permitir
    crear nuestra imagen basado en el. La imagen puede ser una imagen que ya creo otra persona o una que creamos nosotros
    por lo general se busca una imagen que ya tiene todo lo que necesitamos 
    ej: si vamos a hacer un app de node, vamos a buscar una imagen de node que ya tenga todas la dependencias que ya necesitamos
    que ya tenga todo instalado 
    Siempre ir a dockerHub y buscar por ej: node
        nos aparecera la imagen oficial de node, dentro hay un monton de tags de sus versiones
        casi todos usan la version con alpine, porque es muy livana y tiene lo minimo y necesario (5.5MB)

        docker images |grep alpine      : podemos ver cuantas imagenes usan alpine
    
    siempre buscar la version que tenga el tag de alpine! y siempre colocar la verion que vas a ocupar
        FROM node:12.22.1-alpine3.11
    
 2. Declarar donde vamos a hacer todo nuestro trabajo:
    WORKDIR /app    : /app es un directorio que no existe en node, pero se va a crear automaticamente 
        todos los comandos que haga en ese directorio se van a correr dentro de este 

 3.
    COPY . .    : copia (.) el directorio en el que estoy en mi app todos los archivos que tengo en mi directorio (Dockerfile)
         los va a copiar dentro del contenerdor en punto (.) en este caso /app

 4. 
    RUN yarn install --production   : compila todo que tenemos en nuestro codigo en node 

 5. Si o si al final de cada una de las imagenes de Dockerfile, debemos especificar lo que queremos que vaya a correr 
    CMD ["node", "/app/src/index.js"]
        por ejemplo, en el caso de arriva. Queremos que corra "node" y como argumento "/app/src/index.js"
        cuando se inicie el contenedor va a correr ese binario

    tambien se podria usar:
    ENTRYPOINT node :el entrypoint permite dejar abierto un comando para despues pasarle argumentos
        es util en una imagen de python. Cuando se hace correr la imagen al final tendriamos que
        que pasarle este argumento /app/src/index.js
        todo esto es en el caso de que se tenga varios binarios que se quieran correr

----- Como hacemos para contruir un contenedor? ---------

    1. Usamos el comando:
        docker build . : contruye el contenedor
            Pero es mejor si le agregamos un tag para darle un nombre
        docker build -t nombreImagen  

    2. Ahora comienza la descarga de la imagen en node, va a copiar todos los archivos y va correr el yarn install --production
        LISTO, la imagen construida de nuestra aplicacion
    Aqui solo construirmos la imagen, no la corrimos

    3. Para correr la imagen
        docker run nombreImagen
            listo el contenerdor esta corriendo, podemos verlo con el comando docker ps
    
    Podemos ver que al final dice: Listening on port 3000
        es decir que la app esta escuchando en el puerto 3000 para que podamos navegar y ver
        el contenido de esa pagina web: localhost:3000
        si sale error es que docker no esta compartida con el host, si queremos acceder tenemos que especificare
        en la linea del docker run:
            docker run -dp 3000:3000 nombreImagen
                lo que hace es correr un nuevo contenedor con la imagen nombreImagen pero con otro id, pero lo va a transmitir al puerto 3000
            Ahora si esta funcionando la app en el puerto! Y puedo agregar cosas o hacer cambios
        
    4. Para parar la imagen:
        docker ps
        docker stop idnombreImagen

    5. Para correrlo otra vez:
        docker run -dp 3000:3000 nombreImagen
            pero vemos que se crea otro contenedor con otro id, y todos los agregados ya no estan
            vuelve a como esta antes de cualquier modificacion

            --Como mantener esos datos?--

            primero si tenemos abierto esa imagen que no queremos la cerramos con: docker stop idnombreImagen
            Ahora si vamos a recuperar los datos:
                docker run -d -v /Users/kbs/ejemplo-docker/app/etc:/etc/todos -p 3000:3000 nombreImagen
        